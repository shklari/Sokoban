<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>882</x>
      <y>144</y>
      <w>126</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>_object: Cell
--
-x, y: final int
-_isFloor: Boolean
-_isStorage: Boolean
-_hasPlayer: Boolean
-_hasBox: Boolean 
-image: ImageIcon
--
+getBox(): Box</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>882</x>
      <y>42</y>
      <w>126</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>_object: Player
--
-Cell c
--
+moveRight(Board b): void
+moveLeftt(Board b): void
+moveDown(Board b): void
+moveUp(Board b): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>882</x>
      <y>258</y>
      <w>126</w>
      <h>84</h>
    </coordinates>
    <panel_attributes>_object: Box
--
-Cell c
--
+pushedRight(Board b):void
+pushedLeft(Board b):void
+pushedUp(Board b):void
+pushedDown(Board b):void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>750</x>
      <y>42</y>
      <w>120</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>_object: Board
--
public Player p;
public Cell[][] c;
public Game m;
ImageIcon image
public final int x = 250, y = 250;
public Stack moves;
--
+paintComponent(Graphics gr): void
+paint(Graphics gr):void
+isWin():boolean</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>750</x>
      <y>162</y>
      <w>120</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>JPanel: Game implements
ActionListener
--
-b: Board
-l: LevelLoader
-buttons:JPanel
-lebs:JPanel
-num: int
-staage:int
--
+prevMove():void
+reclac():void
+setVis():void
+actionPerformed
  (ActionEvent evt):void
+main(String[] args):void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>750</x>
      <y>336</y>
      <w>120</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>JFrame: MainWIndow
--
-numOfStage:int
-buttons:JButton[]
-l:LevelLoader
--
+actionPerformed
  (ActionEvent evt):void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>882</x>
      <y>354</y>
      <w>126</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>KeyAdapter: TAdapter
--
-b:Board
-p:Player
--
+keyPressed(KeyEvent e):void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>42</y>
      <w>138</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>_object: LevelLoader
--
-CHAR_WALL:
  static final char='#'
-CHAR_FLOOR:
  static final char=' '
-char CHAR_PLAYER:
  static final char='@'
-CHAR_STORAGE:
  static final char='.'
-CHAR_BOX:
  static final char='$'
-char CHAR_BOX_IN_STORAGE:
  static final char='*'
-CHAR_PLAYER_AT_STORAGE:
  static final char='+'
-_levels:Vector&lt;Cell[][]&gt;
--
+load(String levelsFile):boolean
+getLevelCount():int
+get(int index):Cell[][]
+parseCell(int col, int row,
	char cell):Cell</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>288</x>
      <y>0</y>
      <w>36</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>Player</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>366</x>
      <y>0</y>
      <w>114</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Player.Move(Board b):

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>222</x>
      <y>78</y>
      <w>150</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Cell is Floor(not wall)</panel_attributes>
    <additional_attributes>230.0;87.0;17.0;12.0</additional_attributes>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>318</x>
      <y>126</y>
      <w>168</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>move to Cell
&amp; push opossite
command to b.moves
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>48</x>
      <y>72</y>
      <w>120</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Cell is wall</panel_attributes>
    <additional_attributes>10.0;100.0;175.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>18</x>
      <y>132</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>stop</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>192</x>
      <y>84</y>
      <w>54</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Cell is Box</panel_attributes>
    <additional_attributes>10.0;72.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>138</x>
      <y>126</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Cell.getBox
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>258</x>
      <y>210</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;130.0;30.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>240</x>
      <y>18</y>
      <w>72</w>
      <h>42</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;50.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>138</x>
      <y>48</y>
      <w>126</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>check the Cell which the
player was ordered to go to
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>318</x>
      <y>204</y>
      <w>36</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>Box</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>252</x>
      <y>132</y>
      <w>78</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Box.Pushed
=true</panel_attributes>
    <additional_attributes>110.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>120</x>
      <y>198</y>
      <w>150</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>check the Cell which the
Box was ordered to be pushed to
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>84</x>
      <y>132</y>
      <w>66</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Box.Pushed
=false</panel_attributes>
    <additional_attributes>10.0;20.0;90.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>216</x>
      <y>240</y>
      <w>102</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Cell is floor
&amp; Cell has no Box</panel_attributes>
    <additional_attributes>150.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>258</x>
      <y>282</y>
      <w>132</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>move to Cell
&amp; return true
&amp; push opossite
command to b.moves</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>102</x>
      <y>240</y>
      <w>66</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
Cell is wall or
Cell has a Box</panel_attributes>
    <additional_attributes>10.0;80.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>60</x>
      <y>288</y>
      <w>96</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>return false</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>366</x>
      <y>186</y>
      <w>114</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Box.Pushed(Board b)
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>72</x>
      <y>366</y>
      <w>378</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>MainWIndow(LevelLoader l):
A JFrame includes an array of buttons when prssing on each button will initialize the
consructor of Gamewith the arguments l and the serial number of the pressed button in the array
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>72</x>
      <y>432</y>
      <w>378</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Game(int stage, LevelLoader l):
A JFrame includes a JPanel "buttons", a Board b and a JLabel "leb".
The buttons Jpanel includes the "Back to Main Menu" button, which pressing it will initialize the
  MainWIndow constructor with the argument l, the "Restart this stage" button,
  which initialize b on the same stage the game is at, and the "undo" button which
  cancels the last move the game made.
The game will start with initializing the b JPanel on level 0 if was called from the main function,
  or on a selected level by the user if called from the MainWIndow class
  by choosing the Cell[][] from the LevelLoader with the right index
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>72</x>
      <y>540</y>
      <w>378</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>Board(Game m, Cell[][] luah):
A JPanel which recives a 2-d array of Cells and clone it to a new one, while consructing Player
  in the apropriate index, and initializing a new Stack for the movements accuring by the user.
The Board will also add to the game a KeyListener from the type TAdapter.
Every action accured by the user will move the Player accordingly and the
  Cell[][] will be repaint while checking if the Win condition is true.
  
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>72</x>
      <y>624</y>
      <w>378</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>TAdapter(Board b):
A KeyAdapter which affects on the board's Player.
  Every arrow key the user will press will call the function Player.Move according to the key Pressed.
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
